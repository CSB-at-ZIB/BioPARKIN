# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_parkin', [dirname(__file__)])
        except ImportError:
            import _parkin
            return _parkin
        if fp is not None:
            try:
                _mod = imp.load_module('_parkin', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _parkin = swig_import_helper()
    del swig_import_helper
else:
    import _parkin
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


EPMACH = _parkin.EPMACH
sqrtEPMACH = _parkin.sqrtEPMACH
class ErrType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrType, name)
    __repr__ = _swig_repr
    def __init__(self, ierr = 0, s = ""): 
        this = _parkin.new_ErrType(ierr, s)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_ErrType
    __del__ = lambda self : None;
    def getIerr(self): return _parkin.ErrType_getIerr(self)
    def setIerr(self, *args): return _parkin.ErrType_setIerr(self, *args)
    def getMsg(self): return _parkin.ErrType_getMsg(self)
    def setMsg(self, *args): return _parkin.ErrType_setMsg(self, *args)
    def __lshift__(self, *args): return _parkin.ErrType___lshift__(self, *args)
ErrType_swigregister = _parkin.ErrType_swigregister
ErrType_swigregister(ErrType)
cvar = _parkin.cvar

class GenericMatrixImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericMatrixImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericMatrixImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_GenericMatrixImpl
    __del__ = lambda self : None;
    def assign(self, *args): return _parkin.GenericMatrixImpl_assign(self, *args)
    def nr(self): return _parkin.GenericMatrixImpl_nr(self)
    def nc(self): return _parkin.GenericMatrixImpl_nc(self)
    def at(self, *args): return _parkin.GenericMatrixImpl_at(self, *args)
    def transpose(self, *args): return _parkin.GenericMatrixImpl_transpose(self, *args)
    def diag(self): return _parkin.GenericMatrixImpl_diag(self)
    def diagm(self, *args): return _parkin.GenericMatrixImpl_diagm(self, *args)
    def rowm(self, *args): return _parkin.GenericMatrixImpl_rowm(self, *args)
    def colm(self, *args): return _parkin.GenericMatrixImpl_colm(self, *args)
    def subm(self, *args): return _parkin.GenericMatrixImpl_subm(self, *args)
    def zero(self): return _parkin.GenericMatrixImpl_zero(self)
    def zeros(self, *args): return _parkin.GenericMatrixImpl_zeros(self, *args)
    def ones(self, *args): return _parkin.GenericMatrixImpl_ones(self, *args)
    def randm(self, *args): return _parkin.GenericMatrixImpl_randm(self, *args)
    def scale_columns(self, *args): return _parkin.GenericMatrixImpl_scale_columns(self, *args)
    def norm(self, *args): return _parkin.GenericMatrixImpl_norm(self, *args)
    def length_squared(self): return _parkin.GenericMatrixImpl_length_squared(self)
    def trace(self): return _parkin.GenericMatrixImpl_trace(self)
    def add(self, *args): return _parkin.GenericMatrixImpl_add(self, *args)
    def subtract(self, *args): return _parkin.GenericMatrixImpl_subtract(self, *args)
    def mult(self, *args): return _parkin.GenericMatrixImpl_mult(self, *args)
    def pointwise_multiply(self, *args): return _parkin.GenericMatrixImpl_pointwise_multiply(self, *args)
    def pointwise_divide(self, *args): return _parkin.GenericMatrixImpl_pointwise_divide(self, *args)
    def instance(self, *args): return _parkin.GenericMatrixImpl_instance(self, *args)
    def put(self, *args): return _parkin.GenericMatrixImpl_put(self, *args)
    def write_rowm(self, *args): return _parkin.GenericMatrixImpl_write_rowm(self, *args)
    def write_colm(self, *args): return _parkin.GenericMatrixImpl_write_colm(self, *args)
    def write_subm(self, *args): return _parkin.GenericMatrixImpl_write_subm(self, *args)
GenericMatrixImpl_swigregister = _parkin.GenericMatrixImpl_swigregister
GenericMatrixImpl_swigregister(GenericMatrixImpl)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _parkin.new_Matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_Matrix
    __del__ = lambda self : None;
    def nr(self): return _parkin.Matrix_nr(self)
    def nc(self): return _parkin.Matrix_nc(self)
    def t(self): return _parkin.Matrix_t(self)
    def rowm(self, *args): return _parkin.Matrix_rowm(self, *args)
    def colm(self, *args): return _parkin.Matrix_colm(self, *args)
    def subm(self, *args): return _parkin.Matrix_subm(self, *args)
    def set_rowm(self, *args): return _parkin.Matrix_set_rowm(self, *args)
    def set_colm(self, *args): return _parkin.Matrix_set_colm(self, *args)
    def set_subm(self, *args): return _parkin.Matrix_set_subm(self, *args)
    def randm(self, *args): return _parkin.Matrix_randm(self, *args)
    def zero(self): return _parkin.Matrix_zero(self)
    def zeros(self, *args): return _parkin.Matrix_zeros(self, *args)
    def ones(self, *args): return _parkin.Matrix_ones(self, *args)
    def scale_columns(self, *args): return _parkin.Matrix_scale_columns(self, *args)
    def norm(self, *args): return _parkin.Matrix_norm(self, *args)
    def trace(self): return _parkin.Matrix_trace(self)
    def factorQRcon(self, mcon = 0, rank = 0, cond = 1.0/EPMACH, meth = 0): return _parkin.Matrix_factorQRcon(self, mcon, rank, cond, meth)
    def factorQR(self, rank = 0, cond = 1.0/EPMACH, meth = 0): return _parkin.Matrix_factorQR(self, rank, cond, meth)
    def impl(self): return _parkin.Matrix_impl(self)
    def __getitem__(self, *args): return _parkin.Matrix___getitem__(self, *args)
    def __setitem__(self, *args): return _parkin.Matrix___setitem__(self, *args)
    def __str__(self): return _parkin.Matrix___str__(self)
Matrix_swigregister = _parkin.Matrix_swigregister
Matrix_swigregister(Matrix)

class Mref(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mref, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_Mref
    __del__ = lambda self : None;
Mref_swigregister = _parkin.Mref_swigregister
Mref_swigregister(Mref)


def add(*args):
  return _parkin.add(*args)
add = _parkin.add
class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _parkin.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_Vector
    __del__ = lambda self : None;
    def nr(self): return _parkin.Vector_nr(self)
    def nc(self): return _parkin.Vector_nc(self)
    def __call__(self, *args): return _parkin.Vector___call__(self, *args)
    def t(self): return _parkin.Vector_t(self)
    def diag(self): return _parkin.Vector_diag(self)
    def row(self, *args): return _parkin.Vector_row(self, *args)
    def set_row(self, *args): return _parkin.Vector_set_row(self, *args)
    def rand(self, *args): return _parkin.Vector_rand(self, *args)
    def zero(self): return _parkin.Vector_zero(self)
    def zeros(self, *args): return _parkin.Vector_zeros(self, *args)
    def ones(self, *args): return _parkin.Vector_ones(self, *args)
    def norm(self, *args): return _parkin.Vector_norm(self, *args)
    def dotmult(self, *args): return _parkin.Vector_dotmult(self, *args)
    def dotdiv(self, *args): return _parkin.Vector_dotdiv(self, *args)
    def impl(self): return _parkin.Vector_impl(self)
    def __getslice__(self, *args): return _parkin.Vector___getslice__(self, *args)
    def __getitem__(self, *args): return _parkin.Vector___getitem__(self, *args)
    def __setitem__(self, *args): return _parkin.Vector___setitem__(self, *args)
    def __len__(self): return _parkin.Vector___len__(self)
    def __str__(self): return _parkin.Vector___str__(self)
Vector_swigregister = _parkin.Vector_swigregister
Vector_swigregister(Vector)

class Vref(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vref, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_Vref
    __del__ = lambda self : None;
Vref_swigregister = _parkin.Vref_swigregister
Vref_swigregister(Vref)


def __sub__(*args):
  return _parkin.__sub__(*args)
__sub__ = _parkin.__sub__

def norm(*args):
  return _parkin.norm(*args)
norm = _parkin.norm

def length_squared(*args):
  return _parkin.length_squared(*args)
length_squared = _parkin.length_squared
class GenericDecomp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericDecomp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericDecomp, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_GenericDecomp
    __del__ = lambda self : None;
    def decompose(self, *args): return _parkin.GenericDecomp_decompose(self, *args)
    def solve(self, *args): return _parkin.GenericDecomp_solve(self, *args)
    def getFirstFactor(self, *args): return _parkin.GenericDecomp_getFirstFactor(self, *args)
    def getSecondFactor(self, *args): return _parkin.GenericDecomp_getSecondFactor(self, *args)
    def isValid(self): return _parkin.GenericDecomp_isValid(self)
    def getError(self): return _parkin.GenericDecomp_getError(self)
GenericDecomp_swigregister = _parkin.GenericDecomp_swigregister
GenericDecomp_swigregister(GenericDecomp)

def __add__(*args):
  return _parkin.__add__(*args)
__add__ = _parkin.__add__

def __mul__(*args):
  return _parkin.__mul__(*args)
__mul__ = _parkin.__mul__

def __lshift__(*args):
  return _parkin.__lshift__(*args)
__lshift__ = _parkin.__lshift__

def mult(*args):
  return _parkin.mult(*args)
mult = _parkin.mult

class GenericQRPseudoInv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericQRPseudoInv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericQRPseudoInv, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_GenericQRPseudoInv
    __del__ = lambda self : None;
    def clone(self): return _parkin.GenericQRPseudoInv_clone(self)
    def prepare(self, *args): return _parkin.GenericQRPseudoInv_prepare(self, *args)
    def solvePInv(self, *args): return _parkin.GenericQRPseudoInv_solvePInv(self, *args)
    def solveR(self, *args): return _parkin.GenericQRPseudoInv_solveR(self, *args)
    def projectIntoSubspace(self, *args): return _parkin.GenericQRPseudoInv_projectIntoSubspace(self, *args)
    def getMat(self): return _parkin.GenericQRPseudoInv_getMat(self)
GenericQRPseudoInv_swigregister = _parkin.GenericQRPseudoInv_swigregister
GenericQRPseudoInv_swigregister(GenericQRPseudoInv)

class QRDecomp(GenericDecomp):
    __swig_setmethods__ = {}
    for _s in [GenericDecomp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QRDecomp, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericDecomp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QRDecomp, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_QRDecomp
    __del__ = lambda self : None;
    def decompose(self, *args): return _parkin.QRDecomp_decompose(self, *args)
    def solve(self, *args): return _parkin.QRDecomp_solve(self, *args)
    def solveR(self, *args): return _parkin.QRDecomp_solveR(self, *args)
    def setNewRank(self, *args): return _parkin.QRDecomp_setNewRank(self, *args)
    def projectIntoSubspace(self, *args): return _parkin.QRDecomp_projectIntoSubspace(self, *args)
    def getFirstFactor(self, *args): return _parkin.QRDecomp_getFirstFactor(self, *args)
    def getSecondFactor(self, *args): return _parkin.QRDecomp_getSecondFactor(self, *args)
    def getThirdFactor(self, *args): return _parkin.QRDecomp_getThirdFactor(self, *args)
    def setPseudoInverseMethod(self, *args): return _parkin.QRDecomp_setPseudoInverseMethod(self, *args)
    def setMaxRank(self, *args): return _parkin.QRDecomp_setMaxRank(self, *args)
    def setMaxCond(self, *args): return _parkin.QRDecomp_setMaxCond(self, *args)
    def getRank(self): return _parkin.QRDecomp_getRank(self)
    def getSubCond(self): return _parkin.QRDecomp_getSubCond(self)
    def getDiag(self): return _parkin.QRDecomp_getDiag(self)
    def getPivot(self): return _parkin.QRDecomp_getPivot(self)
    def getMatH(self): return _parkin.QRDecomp_getMatH(self)
    def getMat(self): return _parkin.QRDecomp_getMat(self)
    def __init__(self, *args): 
        this = _parkin.new_QRDecomp(*args)
        try: self.this.append(this)
        except: self.this = this
QRDecomp_swigregister = _parkin.QRDecomp_swigregister
QRDecomp_swigregister(QRDecomp)

class QRconDecomp(QRDecomp):
    __swig_setmethods__ = {}
    for _s in [QRDecomp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QRconDecomp, name, value)
    __swig_getmethods__ = {}
    for _s in [QRDecomp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QRconDecomp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _parkin.new_QRconDecomp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_QRconDecomp
    __del__ = lambda self : None;
    def decompose(self, *args): return _parkin.QRconDecomp_decompose(self, *args)
    def solve(self, *args): return _parkin.QRconDecomp_solve(self, *args)
    def solveR(self, *args): return _parkin.QRconDecomp_solveR(self, *args)
    def setNewRank(self, *args): return _parkin.QRconDecomp_setNewRank(self, *args)
    def getFirstFactor(self, *args): return _parkin.QRconDecomp_getFirstFactor(self, *args)
    def getSecondFactor(self, *args): return _parkin.QRconDecomp_getSecondFactor(self, *args)
    def setMaxRankc(self, *args): return _parkin.QRconDecomp_setMaxRankc(self, *args)
    def getRankc(self): return _parkin.QRconDecomp_getRankc(self)
    def getSubCondc(self): return _parkin.QRconDecomp_getSubCondc(self)
QRconDecomp_swigregister = _parkin.QRconDecomp_swigregister
QRconDecomp_swigregister(QRconDecomp)

class UserFunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserFunc, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_UserFunc
    __del__ = lambda self : None;
    def fcn(self, *args): return _parkin.UserFunc_fcn(self, *args)
    def jac(self, *args): return _parkin.UserFunc_jac(self, *args)
    def __init__(self): 
        this = _parkin.new_UserFunc()
        try: self.this.append(this)
        except: self.this = this
UserFunc_swigregister = _parkin.UserFunc_swigregister
UserFunc_swigregister(UserFunc)

class IOpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOpt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iscal"] = _parkin.IOpt_iscal_set
    __swig_getmethods__["iscal"] = _parkin.IOpt_iscal_get
    if _newclass:iscal = _swig_property(_parkin.IOpt_iscal_get, _parkin.IOpt_iscal_set)
    __swig_setmethods__["mode"] = _parkin.IOpt_mode_set
    __swig_getmethods__["mode"] = _parkin.IOpt_mode_get
    if _newclass:mode = _swig_property(_parkin.IOpt_mode_get, _parkin.IOpt_mode_set)
    __swig_setmethods__["iterm"] = _parkin.IOpt_iterm_set
    __swig_getmethods__["iterm"] = _parkin.IOpt_iterm_get
    if _newclass:iterm = _swig_property(_parkin.IOpt_iterm_get, _parkin.IOpt_iterm_set)
    __swig_setmethods__["jacgen"] = _parkin.IOpt_jacgen_set
    __swig_getmethods__["jacgen"] = _parkin.IOpt_jacgen_get
    if _newclass:jacgen = _swig_property(_parkin.IOpt_jacgen_get, _parkin.IOpt_jacgen_set)
    __swig_setmethods__["boundeddamp"] = _parkin.IOpt_boundeddamp_set
    __swig_getmethods__["boundeddamp"] = _parkin.IOpt_boundeddamp_get
    if _newclass:boundeddamp = _swig_property(_parkin.IOpt_boundeddamp_get, _parkin.IOpt_boundeddamp_set)
    __swig_setmethods__["nonlin"] = _parkin.IOpt_nonlin_set
    __swig_getmethods__["nonlin"] = _parkin.IOpt_nonlin_get
    if _newclass:nonlin = _swig_property(_parkin.IOpt_nonlin_get, _parkin.IOpt_nonlin_set)
    __swig_setmethods__["rscal"] = _parkin.IOpt_rscal_set
    __swig_getmethods__["rscal"] = _parkin.IOpt_rscal_get
    if _newclass:rscal = _swig_property(_parkin.IOpt_rscal_get, _parkin.IOpt_rscal_set)
    __swig_setmethods__["itmax"] = _parkin.IOpt_itmax_set
    __swig_getmethods__["itmax"] = _parkin.IOpt_itmax_get
    if _newclass:itmax = _swig_property(_parkin.IOpt_itmax_get, _parkin.IOpt_itmax_set)
    __swig_setmethods__["mprerr"] = _parkin.IOpt_mprerr_set
    __swig_getmethods__["mprerr"] = _parkin.IOpt_mprerr_get
    if _newclass:mprerr = _swig_property(_parkin.IOpt_mprerr_get, _parkin.IOpt_mprerr_set)
    __swig_setmethods__["mprmon"] = _parkin.IOpt_mprmon_set
    __swig_getmethods__["mprmon"] = _parkin.IOpt_mprmon_get
    if _newclass:mprmon = _swig_property(_parkin.IOpt_mprmon_get, _parkin.IOpt_mprmon_set)
    __swig_setmethods__["mprsol"] = _parkin.IOpt_mprsol_set
    __swig_getmethods__["mprsol"] = _parkin.IOpt_mprsol_get
    if _newclass:mprsol = _swig_property(_parkin.IOpt_mprsol_get, _parkin.IOpt_mprsol_set)
    __swig_setmethods__["mprtim"] = _parkin.IOpt_mprtim_set
    __swig_getmethods__["mprtim"] = _parkin.IOpt_mprtim_get
    if _newclass:mprtim = _swig_property(_parkin.IOpt_mprtim_get, _parkin.IOpt_mprtim_set)
    __swig_setmethods__["transf"] = _parkin.IOpt_transf_set
    __swig_getmethods__["transf"] = _parkin.IOpt_transf_get
    if _newclass:transf = _swig_property(_parkin.IOpt_transf_get, _parkin.IOpt_transf_set)
    __swig_setmethods__["itrans"] = _parkin.IOpt_itrans_set
    __swig_getmethods__["itrans"] = _parkin.IOpt_itrans_get
    if _newclass:itrans = _swig_property(_parkin.IOpt_itrans_get, _parkin.IOpt_itrans_set)
    __swig_setmethods__["lpos"] = _parkin.IOpt_lpos_set
    __swig_getmethods__["lpos"] = _parkin.IOpt_lpos_get
    if _newclass:lpos = _swig_property(_parkin.IOpt_lpos_get, _parkin.IOpt_lpos_set)
    __swig_setmethods__["norowscal"] = _parkin.IOpt_norowscal_set
    __swig_getmethods__["norowscal"] = _parkin.IOpt_norowscal_get
    if _newclass:norowscal = _swig_property(_parkin.IOpt_norowscal_get, _parkin.IOpt_norowscal_set)
    __swig_setmethods__["qrank1"] = _parkin.IOpt_qrank1_set
    __swig_getmethods__["qrank1"] = _parkin.IOpt_qrank1_get
    if _newclass:qrank1 = _swig_property(_parkin.IOpt_qrank1_get, _parkin.IOpt_qrank1_set)
    __swig_setmethods__["qstat"] = _parkin.IOpt_qstat_set
    __swig_getmethods__["qstat"] = _parkin.IOpt_qstat_get
    if _newclass:qstat = _swig_property(_parkin.IOpt_qstat_get, _parkin.IOpt_qstat_set)
    def __init__(self): 
        this = _parkin.new_IOpt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_IOpt
    __del__ = lambda self : None;
IOpt_swigregister = _parkin.IOpt_swigregister
IOpt_swigregister(IOpt)


def randu():
  return _parkin.randu()
randu = _parkin.randu

def randn():
  return _parkin.randn()
randn = _parkin.randn
class GaussNewtonWk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussNewtonWk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussNewtonWk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vcv"] = _parkin.GaussNewtonWk_vcv_set
    __swig_getmethods__["vcv"] = _parkin.GaussNewtonWk_vcv_get
    if _newclass:vcv = _swig_property(_parkin.GaussNewtonWk_vcv_get, _parkin.GaussNewtonWk_vcv_set)
    __swig_setmethods__["fw"] = _parkin.GaussNewtonWk_fw_set
    __swig_getmethods__["fw"] = _parkin.GaussNewtonWk_fw_get
    if _newclass:fw = _swig_property(_parkin.GaussNewtonWk_fw_get, _parkin.GaussNewtonWk_fw_set)
    __swig_setmethods__["xl"] = _parkin.GaussNewtonWk_xl_set
    __swig_getmethods__["xl"] = _parkin.GaussNewtonWk_xl_get
    if _newclass:xl = _swig_property(_parkin.GaussNewtonWk_xl_get, _parkin.GaussNewtonWk_xl_set)
    __swig_setmethods__["xr"] = _parkin.GaussNewtonWk_xr_set
    __swig_getmethods__["xr"] = _parkin.GaussNewtonWk_xr_get
    if _newclass:xr = _swig_property(_parkin.GaussNewtonWk_xr_get, _parkin.GaussNewtonWk_xr_set)
    __swig_setmethods__["xlb"] = _parkin.GaussNewtonWk_xlb_set
    __swig_getmethods__["xlb"] = _parkin.GaussNewtonWk_xlb_get
    if _newclass:xlb = _swig_property(_parkin.GaussNewtonWk_xlb_get, _parkin.GaussNewtonWk_xlb_set)
    __swig_setmethods__["xub"] = _parkin.GaussNewtonWk_xub_set
    __swig_getmethods__["xub"] = _parkin.GaussNewtonWk_xub_get
    if _newclass:xub = _swig_property(_parkin.GaussNewtonWk_xub_get, _parkin.GaussNewtonWk_xub_set)
    __swig_setmethods__["fcbnd"] = _parkin.GaussNewtonWk_fcbnd_set
    __swig_getmethods__["fcbnd"] = _parkin.GaussNewtonWk_fcbnd_get
    if _newclass:fcbnd = _swig_property(_parkin.GaussNewtonWk_fcbnd_get, _parkin.GaussNewtonWk_fcbnd_set)
    __swig_setmethods__["ajdel"] = _parkin.GaussNewtonWk_ajdel_set
    __swig_getmethods__["ajdel"] = _parkin.GaussNewtonWk_ajdel_get
    if _newclass:ajdel = _swig_property(_parkin.GaussNewtonWk_ajdel_get, _parkin.GaussNewtonWk_ajdel_set)
    __swig_setmethods__["ajmin"] = _parkin.GaussNewtonWk_ajmin_set
    __swig_getmethods__["ajmin"] = _parkin.GaussNewtonWk_ajmin_get
    if _newclass:ajmin = _swig_property(_parkin.GaussNewtonWk_ajmin_get, _parkin.GaussNewtonWk_ajmin_set)
    __swig_setmethods__["etadif"] = _parkin.GaussNewtonWk_etadif_set
    __swig_getmethods__["etadif"] = _parkin.GaussNewtonWk_etadif_get
    if _newclass:etadif = _swig_property(_parkin.GaussNewtonWk_etadif_get, _parkin.GaussNewtonWk_etadif_set)
    __swig_setmethods__["etaini"] = _parkin.GaussNewtonWk_etaini_set
    __swig_getmethods__["etaini"] = _parkin.GaussNewtonWk_etaini_get
    if _newclass:etaini = _swig_property(_parkin.GaussNewtonWk_etaini_get, _parkin.GaussNewtonWk_etaini_set)
    __swig_setmethods__["dlevf"] = _parkin.GaussNewtonWk_dlevf_set
    __swig_getmethods__["dlevf"] = _parkin.GaussNewtonWk_dlevf_get
    if _newclass:dlevf = _swig_property(_parkin.GaussNewtonWk_dlevf_get, _parkin.GaussNewtonWk_dlevf_set)
    __swig_setmethods__["sumx"] = _parkin.GaussNewtonWk_sumx_set
    __swig_getmethods__["sumx"] = _parkin.GaussNewtonWk_sumx_get
    if _newclass:sumx = _swig_property(_parkin.GaussNewtonWk_sumx_get, _parkin.GaussNewtonWk_sumx_set)
    __swig_setmethods__["prec"] = _parkin.GaussNewtonWk_prec_set
    __swig_getmethods__["prec"] = _parkin.GaussNewtonWk_prec_get
    if _newclass:prec = _swig_property(_parkin.GaussNewtonWk_prec_get, _parkin.GaussNewtonWk_prec_set)
    __swig_setmethods__["skap"] = _parkin.GaussNewtonWk_skap_set
    __swig_getmethods__["skap"] = _parkin.GaussNewtonWk_skap_get
    if _newclass:skap = _swig_property(_parkin.GaussNewtonWk_skap_get, _parkin.GaussNewtonWk_skap_set)
    __swig_setmethods__["sigma2"] = _parkin.GaussNewtonWk_sigma2_set
    __swig_getmethods__["sigma2"] = _parkin.GaussNewtonWk_sigma2_get
    if _newclass:sigma2 = _swig_property(_parkin.GaussNewtonWk_sigma2_get, _parkin.GaussNewtonWk_sigma2_set)
    __swig_setmethods__["fcstart"] = _parkin.GaussNewtonWk_fcstart_set
    __swig_getmethods__["fcstart"] = _parkin.GaussNewtonWk_fcstart_get
    if _newclass:fcstart = _swig_property(_parkin.GaussNewtonWk_fcstart_get, _parkin.GaussNewtonWk_fcstart_set)
    __swig_setmethods__["fcmin"] = _parkin.GaussNewtonWk_fcmin_set
    __swig_getmethods__["fcmin"] = _parkin.GaussNewtonWk_fcmin_get
    if _newclass:fcmin = _swig_property(_parkin.GaussNewtonWk_fcmin_get, _parkin.GaussNewtonWk_fcmin_set)
    __swig_setmethods__["sigma"] = _parkin.GaussNewtonWk_sigma_set
    __swig_getmethods__["sigma"] = _parkin.GaussNewtonWk_sigma_get
    if _newclass:sigma = _swig_property(_parkin.GaussNewtonWk_sigma_get, _parkin.GaussNewtonWk_sigma_set)
    __swig_setmethods__["cond"] = _parkin.GaussNewtonWk_cond_set
    __swig_getmethods__["cond"] = _parkin.GaussNewtonWk_cond_get
    if _newclass:cond = _swig_property(_parkin.GaussNewtonWk_cond_get, _parkin.GaussNewtonWk_cond_set)
    __swig_setmethods__["niter"] = _parkin.GaussNewtonWk_niter_set
    __swig_getmethods__["niter"] = _parkin.GaussNewtonWk_niter_get
    if _newclass:niter = _swig_property(_parkin.GaussNewtonWk_niter_get, _parkin.GaussNewtonWk_niter_set)
    __swig_setmethods__["nitmax"] = _parkin.GaussNewtonWk_nitmax_set
    __swig_getmethods__["nitmax"] = _parkin.GaussNewtonWk_nitmax_get
    if _newclass:nitmax = _swig_property(_parkin.GaussNewtonWk_nitmax_get, _parkin.GaussNewtonWk_nitmax_set)
    __swig_setmethods__["irank"] = _parkin.GaussNewtonWk_irank_set
    __swig_getmethods__["irank"] = _parkin.GaussNewtonWk_irank_get
    if _newclass:irank = _swig_property(_parkin.GaussNewtonWk_irank_get, _parkin.GaussNewtonWk_irank_set)
    __swig_setmethods__["ncorr"] = _parkin.GaussNewtonWk_ncorr_set
    __swig_getmethods__["ncorr"] = _parkin.GaussNewtonWk_ncorr_get
    if _newclass:ncorr = _swig_property(_parkin.GaussNewtonWk_ncorr_get, _parkin.GaussNewtonWk_ncorr_set)
    __swig_setmethods__["nrejr1"] = _parkin.GaussNewtonWk_nrejr1_set
    __swig_getmethods__["nrejr1"] = _parkin.GaussNewtonWk_nrejr1_get
    if _newclass:nrejr1 = _swig_property(_parkin.GaussNewtonWk_nrejr1_get, _parkin.GaussNewtonWk_nrejr1_set)
    __swig_setmethods__["njac"] = _parkin.GaussNewtonWk_njac_set
    __swig_getmethods__["njac"] = _parkin.GaussNewtonWk_njac_get
    if _newclass:njac = _swig_property(_parkin.GaussNewtonWk_njac_get, _parkin.GaussNewtonWk_njac_set)
    __swig_setmethods__["nfcn"] = _parkin.GaussNewtonWk_nfcn_set
    __swig_getmethods__["nfcn"] = _parkin.GaussNewtonWk_nfcn_get
    if _newclass:nfcn = _swig_property(_parkin.GaussNewtonWk_nfcn_get, _parkin.GaussNewtonWk_nfcn_set)
    __swig_setmethods__["nfcnj"] = _parkin.GaussNewtonWk_nfcnj_set
    __swig_getmethods__["nfcnj"] = _parkin.GaussNewtonWk_nfcnj_get
    if _newclass:nfcnj = _swig_property(_parkin.GaussNewtonWk_nfcnj_get, _parkin.GaussNewtonWk_nfcnj_set)
    __swig_setmethods__["ifail"] = _parkin.GaussNewtonWk_ifail_set
    __swig_getmethods__["ifail"] = _parkin.GaussNewtonWk_ifail_get
    if _newclass:ifail = _swig_property(_parkin.GaussNewtonWk_ifail_get, _parkin.GaussNewtonWk_ifail_set)
    __swig_setmethods__["qsucc"] = _parkin.GaussNewtonWk_qsucc_set
    __swig_getmethods__["qsucc"] = _parkin.GaussNewtonWk_qsucc_get
    if _newclass:qsucc = _swig_property(_parkin.GaussNewtonWk_qsucc_get, _parkin.GaussNewtonWk_qsucc_set)
    def __init__(self): 
        this = _parkin.new_GaussNewtonWk()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_GaussNewtonWk
    __del__ = lambda self : None;
GaussNewtonWk_swigregister = _parkin.GaussNewtonWk_swigregister
GaussNewtonWk_swigregister(GaussNewtonWk)

class GaussNewton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussNewton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussNewton, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _parkin.new_GaussNewton()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_GaussNewton
    __del__ = lambda self : None;
    def setIOpt(self, *args): return _parkin.GaussNewton_setIOpt(self, *args)
    def setWk(self, *args): return _parkin.GaussNewton_setWk(self, *args)
    def setProblem(self, *args): return _parkin.GaussNewton_setProblem(self, *args)
    def initialise(self, *args): return _parkin.GaussNewton_initialise(self, *args)
    def computeSensitivity(self): return _parkin.GaussNewton_computeSensitivity(self)
    def getSensitivity(self): return _parkin.GaussNewton_getSensitivity(self)
    def getSensitivityMatrix(self): return _parkin.GaussNewton_getSensitivityMatrix(self)
    def run(self): return _parkin.GaussNewton_run(self)
    def analyse(self): return _parkin.GaussNewton_analyse(self)
    def getSolution(self): return _parkin.GaussNewton_getSolution(self)
    def getIOpt(self): return _parkin.GaussNewton_getIOpt(self)
    def getWk(self): return _parkin.GaussNewton_getWk(self)
    def printCounter(self): return _parkin.GaussNewton_printCounter(self)
    def getSolutionIter(self): return _parkin.GaussNewton_getSolutionIter(self)
GaussNewton_swigregister = _parkin.GaussNewton_swigregister
GaussNewton_swigregister(GaussNewton)

class YeOldeParkinWk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YeOldeParkinWk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YeOldeParkinWk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eps"] = _parkin.YeOldeParkinWk_eps_set
    __swig_getmethods__["eps"] = _parkin.YeOldeParkinWk_eps_get
    if _newclass:eps = _swig_property(_parkin.YeOldeParkinWk_eps_get, _parkin.YeOldeParkinWk_eps_set)
    __swig_setmethods__["fc"] = _parkin.YeOldeParkinWk_fc_set
    __swig_getmethods__["fc"] = _parkin.YeOldeParkinWk_fc_get
    if _newclass:fc = _swig_property(_parkin.YeOldeParkinWk_fc_get, _parkin.YeOldeParkinWk_fc_set)
    __swig_setmethods__["zscal"] = _parkin.YeOldeParkinWk_zscal_set
    __swig_getmethods__["zscal"] = _parkin.YeOldeParkinWk_zscal_get
    if _newclass:zscal = _swig_property(_parkin.YeOldeParkinWk_zscal_get, _parkin.YeOldeParkinWk_zscal_set)
    __swig_setmethods__["xstep"] = _parkin.YeOldeParkinWk_xstep_set
    __swig_getmethods__["xstep"] = _parkin.YeOldeParkinWk_xstep_get
    if _newclass:xstep = _swig_property(_parkin.YeOldeParkinWk_xstep_get, _parkin.YeOldeParkinWk_xstep_set)
    __swig_setmethods__["cond"] = _parkin.YeOldeParkinWk_cond_set
    __swig_getmethods__["cond"] = _parkin.YeOldeParkinWk_cond_get
    if _newclass:cond = _swig_property(_parkin.YeOldeParkinWk_cond_get, _parkin.YeOldeParkinWk_cond_set)
    __swig_setmethods__["fcmin"] = _parkin.YeOldeParkinWk_fcmin_set
    __swig_getmethods__["fcmin"] = _parkin.YeOldeParkinWk_fcmin_get
    if _newclass:fcmin = _swig_property(_parkin.YeOldeParkinWk_fcmin_get, _parkin.YeOldeParkinWk_fcmin_set)
    __swig_setmethods__["iter"] = _parkin.YeOldeParkinWk_iter_set
    __swig_getmethods__["iter"] = _parkin.YeOldeParkinWk_iter_get
    if _newclass:iter = _swig_property(_parkin.YeOldeParkinWk_iter_get, _parkin.YeOldeParkinWk_iter_set)
    __swig_setmethods__["itmax"] = _parkin.YeOldeParkinWk_itmax_set
    __swig_getmethods__["itmax"] = _parkin.YeOldeParkinWk_itmax_get
    if _newclass:itmax = _swig_property(_parkin.YeOldeParkinWk_itmax_get, _parkin.YeOldeParkinWk_itmax_set)
    def __init__(self): 
        this = _parkin.new_YeOldeParkinWk()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_YeOldeParkinWk
    __del__ = lambda self : None;
YeOldeParkinWk_swigregister = _parkin.YeOldeParkinWk_swigregister
YeOldeParkinWk_swigregister(YeOldeParkinWk)

class YeOldeParkinCore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YeOldeParkinCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YeOldeParkinCore, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _parkin.new_YeOldeParkinCore()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_YeOldeParkinCore
    __del__ = lambda self : None;
    def setIOpt(self, *args): return _parkin.YeOldeParkinCore_setIOpt(self, *args)
    def setWk(self, *args): return _parkin.YeOldeParkinCore_setWk(self, *args)
    def setProblem(self, *args): return _parkin.YeOldeParkinCore_setProblem(self, *args)
    def initialise(self, *args): return _parkin.YeOldeParkinCore_initialise(self, *args)
    def run(self): return _parkin.YeOldeParkinCore_run(self)
    def analyse(self): return _parkin.YeOldeParkinCore_analyse(self)
    def getSolution(self): return _parkin.YeOldeParkinCore_getSolution(self)
    def getWk(self): return _parkin.YeOldeParkinCore_getWk(self)
    def printCounter(self): return _parkin.YeOldeParkinCore_printCounter(self)
YeOldeParkinCore_swigregister = _parkin.YeOldeParkinCore_swigregister
YeOldeParkinCore_swigregister(YeOldeParkinCore)

class ODESolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODESolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODESolver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_ODESolver
    __del__ = lambda self : None;
    def integrate(self, *args): return _parkin.ODESolver_integrate(self, *args)
    def getAdaptiveGridPoints(self): return _parkin.ODESolver_getAdaptiveGridPoints(self)
    def getAdaptiveSolution(self): return _parkin.ODESolver_getAdaptiveSolution(self)
    def setRTol(self, *args): return _parkin.ODESolver_setRTol(self, *args)
    def setATol(self, *args): return _parkin.ODESolver_setATol(self, *args)
    def getRTol(self): return _parkin.ODESolver_getRTol(self)
    def getATol(self): return _parkin.ODESolver_getATol(self)
ODESolver_swigregister = _parkin.ODESolver_swigregister
ODESolver_swigregister(ODESolver)

class TrajData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrajData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrajData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _parkin.TrajData_t_set
    __swig_getmethods__["t"] = _parkin.TrajData_t_get
    if _newclass:t = _swig_property(_parkin.TrajData_t_get, _parkin.TrajData_t_set)
    __swig_setmethods__["y"] = _parkin.TrajData_y_set
    __swig_getmethods__["y"] = _parkin.TrajData_y_get
    if _newclass:y = _swig_property(_parkin.TrajData_y_get, _parkin.TrajData_y_set)
    def __init__(self): 
        this = _parkin.new_TrajData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_TrajData
    __del__ = lambda self : None;
TrajData_swigregister = _parkin.TrajData_swigregister
TrajData_swigregister(TrajData)

class ODETrajectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODETrajectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODETrajectory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_ODETrajectory
    __del__ = lambda self : None;
    def clone(self): return _parkin.ODETrajectory_clone(self)
    def clear(self): return _parkin.ODETrajectory_clear(self)
    def insert(self, *args): return _parkin.ODETrajectory_insert(self, *args)
    def eval(self, *args): return _parkin.ODETrajectory_eval(self, *args)
    def setDim(self, *args): return _parkin.ODETrajectory_setDim(self, *args)
ODETrajectory_swigregister = _parkin.ODETrajectory_swigregister
ODETrajectory_swigregister(ODETrajectory)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _parkin.SwigPyIterator_value(self)
    def incr(self, n = 1): return _parkin.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _parkin.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _parkin.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _parkin.SwigPyIterator_equal(self, *args)
    def copy(self): return _parkin.SwigPyIterator_copy(self)
    def next(self): return _parkin.SwigPyIterator_next(self)
    def __next__(self): return _parkin.SwigPyIterator___next__(self)
    def previous(self): return _parkin.SwigPyIterator_previous(self)
    def advance(self, *args): return _parkin.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _parkin.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _parkin.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _parkin.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _parkin.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _parkin.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _parkin.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _parkin.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.Param_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.Param___nonzero__(self)
    def __bool__(self): return _parkin.Param___bool__(self)
    def __len__(self): return _parkin.Param___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _parkin.Param___getitem__(self, *args)
    def __delitem__(self, *args): return _parkin.Param___delitem__(self, *args)
    def has_key(self, *args): return _parkin.Param_has_key(self, *args)
    def keys(self): return _parkin.Param_keys(self)
    def values(self): return _parkin.Param_values(self)
    def items(self): return _parkin.Param_items(self)
    def __contains__(self, *args): return _parkin.Param___contains__(self, *args)
    def key_iterator(self): return _parkin.Param_key_iterator(self)
    def value_iterator(self): return _parkin.Param_value_iterator(self)
    def __setitem__(self, *args): return _parkin.Param___setitem__(self, *args)
    def asdict(self): return _parkin.Param_asdict(self)
    def __init__(self, *args): 
        this = _parkin.new_Param(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _parkin.Param_empty(self)
    def size(self): return _parkin.Param_size(self)
    def clear(self): return _parkin.Param_clear(self)
    def swap(self, *args): return _parkin.Param_swap(self, *args)
    def get_allocator(self): return _parkin.Param_get_allocator(self)
    def begin(self): return _parkin.Param_begin(self)
    def end(self): return _parkin.Param_end(self)
    def rbegin(self): return _parkin.Param_rbegin(self)
    def rend(self): return _parkin.Param_rend(self)
    def count(self, *args): return _parkin.Param_count(self, *args)
    def erase(self, *args): return _parkin.Param_erase(self, *args)
    def find(self, *args): return _parkin.Param_find(self, *args)
    def lower_bound(self, *args): return _parkin.Param_lower_bound(self, *args)
    def upper_bound(self, *args): return _parkin.Param_upper_bound(self, *args)
    __swig_destroy__ = _parkin.delete_Param
    __del__ = lambda self : None;
Param_swigregister = _parkin.Param_swigregister
Param_swigregister(Param)

class StringList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.StringList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.StringList___nonzero__(self)
    def __bool__(self): return _parkin.StringList___bool__(self)
    def __len__(self): return _parkin.StringList___len__(self)
    def pop(self): return _parkin.StringList_pop(self)
    def __getslice__(self, *args): return _parkin.StringList___getslice__(self, *args)
    def __setslice__(self, *args): return _parkin.StringList___setslice__(self, *args)
    def __delslice__(self, *args): return _parkin.StringList___delslice__(self, *args)
    def __delitem__(self, *args): return _parkin.StringList___delitem__(self, *args)
    def __getitem__(self, *args): return _parkin.StringList___getitem__(self, *args)
    def __setitem__(self, *args): return _parkin.StringList___setitem__(self, *args)
    def append(self, *args): return _parkin.StringList_append(self, *args)
    def empty(self): return _parkin.StringList_empty(self)
    def size(self): return _parkin.StringList_size(self)
    def clear(self): return _parkin.StringList_clear(self)
    def swap(self, *args): return _parkin.StringList_swap(self, *args)
    def get_allocator(self): return _parkin.StringList_get_allocator(self)
    def begin(self): return _parkin.StringList_begin(self)
    def end(self): return _parkin.StringList_end(self)
    def rbegin(self): return _parkin.StringList_rbegin(self)
    def rend(self): return _parkin.StringList_rend(self)
    def pop_back(self): return _parkin.StringList_pop_back(self)
    def erase(self, *args): return _parkin.StringList_erase(self, *args)
    def __init__(self, *args): 
        this = _parkin.new_StringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _parkin.StringList_push_back(self, *args)
    def front(self): return _parkin.StringList_front(self)
    def back(self): return _parkin.StringList_back(self)
    def assign(self, *args): return _parkin.StringList_assign(self, *args)
    def resize(self, *args): return _parkin.StringList_resize(self, *args)
    def insert(self, *args): return _parkin.StringList_insert(self, *args)
    def reserve(self, *args): return _parkin.StringList_reserve(self, *args)
    def capacity(self): return _parkin.StringList_capacity(self)
    __swig_destroy__ = _parkin.delete_StringList
    __del__ = lambda self : None;
StringList_swigregister = _parkin.StringList_swigregister
StringList_swigregister(StringList)

class ValueList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValueList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ValueList, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.ValueList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.ValueList___nonzero__(self)
    def __bool__(self): return _parkin.ValueList___bool__(self)
    def __len__(self): return _parkin.ValueList___len__(self)
    def pop(self): return _parkin.ValueList_pop(self)
    def __getslice__(self, *args): return _parkin.ValueList___getslice__(self, *args)
    def __setslice__(self, *args): return _parkin.ValueList___setslice__(self, *args)
    def __delslice__(self, *args): return _parkin.ValueList___delslice__(self, *args)
    def __delitem__(self, *args): return _parkin.ValueList___delitem__(self, *args)
    def __getitem__(self, *args): return _parkin.ValueList___getitem__(self, *args)
    def __setitem__(self, *args): return _parkin.ValueList___setitem__(self, *args)
    def append(self, *args): return _parkin.ValueList_append(self, *args)
    def empty(self): return _parkin.ValueList_empty(self)
    def size(self): return _parkin.ValueList_size(self)
    def clear(self): return _parkin.ValueList_clear(self)
    def swap(self, *args): return _parkin.ValueList_swap(self, *args)
    def get_allocator(self): return _parkin.ValueList_get_allocator(self)
    def begin(self): return _parkin.ValueList_begin(self)
    def end(self): return _parkin.ValueList_end(self)
    def rbegin(self): return _parkin.ValueList_rbegin(self)
    def rend(self): return _parkin.ValueList_rend(self)
    def pop_back(self): return _parkin.ValueList_pop_back(self)
    def erase(self, *args): return _parkin.ValueList_erase(self, *args)
    def __init__(self, *args): 
        this = _parkin.new_ValueList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _parkin.ValueList_push_back(self, *args)
    def front(self): return _parkin.ValueList_front(self)
    def back(self): return _parkin.ValueList_back(self)
    def assign(self, *args): return _parkin.ValueList_assign(self, *args)
    def resize(self, *args): return _parkin.ValueList_resize(self, *args)
    def insert(self, *args): return _parkin.ValueList_insert(self, *args)
    def reserve(self, *args): return _parkin.ValueList_reserve(self, *args)
    def capacity(self): return _parkin.ValueList_capacity(self)
    __swig_destroy__ = _parkin.delete_ValueList
    __del__ = lambda self : None;
ValueList_swigregister = _parkin.ValueList_swigregister
ValueList_swigregister(ValueList)

class VectorList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorList, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.VectorList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.VectorList___nonzero__(self)
    def __bool__(self): return _parkin.VectorList___bool__(self)
    def __len__(self): return _parkin.VectorList___len__(self)
    def pop(self): return _parkin.VectorList_pop(self)
    def __getslice__(self, *args): return _parkin.VectorList___getslice__(self, *args)
    def __setslice__(self, *args): return _parkin.VectorList___setslice__(self, *args)
    def __delslice__(self, *args): return _parkin.VectorList___delslice__(self, *args)
    def __delitem__(self, *args): return _parkin.VectorList___delitem__(self, *args)
    def __getitem__(self, *args): return _parkin.VectorList___getitem__(self, *args)
    def __setitem__(self, *args): return _parkin.VectorList___setitem__(self, *args)
    def append(self, *args): return _parkin.VectorList_append(self, *args)
    def empty(self): return _parkin.VectorList_empty(self)
    def size(self): return _parkin.VectorList_size(self)
    def clear(self): return _parkin.VectorList_clear(self)
    def swap(self, *args): return _parkin.VectorList_swap(self, *args)
    def get_allocator(self): return _parkin.VectorList_get_allocator(self)
    def begin(self): return _parkin.VectorList_begin(self)
    def end(self): return _parkin.VectorList_end(self)
    def rbegin(self): return _parkin.VectorList_rbegin(self)
    def rend(self): return _parkin.VectorList_rend(self)
    def pop_back(self): return _parkin.VectorList_pop_back(self)
    def erase(self, *args): return _parkin.VectorList_erase(self, *args)
    def __init__(self, *args): 
        this = _parkin.new_VectorList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _parkin.VectorList_push_back(self, *args)
    def front(self): return _parkin.VectorList_front(self)
    def back(self): return _parkin.VectorList_back(self)
    def assign(self, *args): return _parkin.VectorList_assign(self, *args)
    def resize(self, *args): return _parkin.VectorList_resize(self, *args)
    def insert(self, *args): return _parkin.VectorList_insert(self, *args)
    def reserve(self, *args): return _parkin.VectorList_reserve(self, *args)
    def capacity(self): return _parkin.VectorList_capacity(self)
    __swig_destroy__ = _parkin.delete_VectorList
    __del__ = lambda self : None;
VectorList_swigregister = _parkin.VectorList_swigregister
VectorList_swigregister(VectorList)

class MatrixList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixList, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.MatrixList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.MatrixList___nonzero__(self)
    def __bool__(self): return _parkin.MatrixList___bool__(self)
    def __len__(self): return _parkin.MatrixList___len__(self)
    def pop(self): return _parkin.MatrixList_pop(self)
    def __getslice__(self, *args): return _parkin.MatrixList___getslice__(self, *args)
    def __setslice__(self, *args): return _parkin.MatrixList___setslice__(self, *args)
    def __delslice__(self, *args): return _parkin.MatrixList___delslice__(self, *args)
    def __delitem__(self, *args): return _parkin.MatrixList___delitem__(self, *args)
    def __getitem__(self, *args): return _parkin.MatrixList___getitem__(self, *args)
    def __setitem__(self, *args): return _parkin.MatrixList___setitem__(self, *args)
    def append(self, *args): return _parkin.MatrixList_append(self, *args)
    def empty(self): return _parkin.MatrixList_empty(self)
    def size(self): return _parkin.MatrixList_size(self)
    def clear(self): return _parkin.MatrixList_clear(self)
    def swap(self, *args): return _parkin.MatrixList_swap(self, *args)
    def get_allocator(self): return _parkin.MatrixList_get_allocator(self)
    def begin(self): return _parkin.MatrixList_begin(self)
    def end(self): return _parkin.MatrixList_end(self)
    def rbegin(self): return _parkin.MatrixList_rbegin(self)
    def rend(self): return _parkin.MatrixList_rend(self)
    def pop_back(self): return _parkin.MatrixList_pop_back(self)
    def erase(self, *args): return _parkin.MatrixList_erase(self, *args)
    def __init__(self, *args): 
        this = _parkin.new_MatrixList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _parkin.MatrixList_push_back(self, *args)
    def front(self): return _parkin.MatrixList_front(self)
    def back(self): return _parkin.MatrixList_back(self)
    def assign(self, *args): return _parkin.MatrixList_assign(self, *args)
    def resize(self, *args): return _parkin.MatrixList_resize(self, *args)
    def insert(self, *args): return _parkin.MatrixList_insert(self, *args)
    def reserve(self, *args): return _parkin.MatrixList_reserve(self, *args)
    def capacity(self): return _parkin.MatrixList_capacity(self)
    __swig_destroy__ = _parkin.delete_MatrixList
    __del__ = lambda self : None;
MatrixList_swigregister = _parkin.MatrixList_swigregister
MatrixList_swigregister(MatrixList)

class QRconDecompList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QRconDecompList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QRconDecompList, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.QRconDecompList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.QRconDecompList___nonzero__(self)
    def __bool__(self): return _parkin.QRconDecompList___bool__(self)
    def __len__(self): return _parkin.QRconDecompList___len__(self)
    def pop(self): return _parkin.QRconDecompList_pop(self)
    def __getslice__(self, *args): return _parkin.QRconDecompList___getslice__(self, *args)
    def __setslice__(self, *args): return _parkin.QRconDecompList___setslice__(self, *args)
    def __delslice__(self, *args): return _parkin.QRconDecompList___delslice__(self, *args)
    def __delitem__(self, *args): return _parkin.QRconDecompList___delitem__(self, *args)
    def __getitem__(self, *args): return _parkin.QRconDecompList___getitem__(self, *args)
    def __setitem__(self, *args): return _parkin.QRconDecompList___setitem__(self, *args)
    def append(self, *args): return _parkin.QRconDecompList_append(self, *args)
    def empty(self): return _parkin.QRconDecompList_empty(self)
    def size(self): return _parkin.QRconDecompList_size(self)
    def clear(self): return _parkin.QRconDecompList_clear(self)
    def swap(self, *args): return _parkin.QRconDecompList_swap(self, *args)
    def get_allocator(self): return _parkin.QRconDecompList_get_allocator(self)
    def begin(self): return _parkin.QRconDecompList_begin(self)
    def end(self): return _parkin.QRconDecompList_end(self)
    def rbegin(self): return _parkin.QRconDecompList_rbegin(self)
    def rend(self): return _parkin.QRconDecompList_rend(self)
    def pop_back(self): return _parkin.QRconDecompList_pop_back(self)
    def erase(self, *args): return _parkin.QRconDecompList_erase(self, *args)
    def __init__(self, *args): 
        this = _parkin.new_QRconDecompList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _parkin.QRconDecompList_push_back(self, *args)
    def front(self): return _parkin.QRconDecompList_front(self)
    def back(self): return _parkin.QRconDecompList_back(self)
    def assign(self, *args): return _parkin.QRconDecompList_assign(self, *args)
    def resize(self, *args): return _parkin.QRconDecompList_resize(self, *args)
    def insert(self, *args): return _parkin.QRconDecompList_insert(self, *args)
    def reserve(self, *args): return _parkin.QRconDecompList_reserve(self, *args)
    def capacity(self): return _parkin.QRconDecompList_capacity(self)
    __swig_destroy__ = _parkin.delete_QRconDecompList
    __del__ = lambda self : None;
QRconDecompList_swigregister = _parkin.QRconDecompList_swigregister
QRconDecompList_swigregister(QRconDecompList)

class ValuePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValuePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ValuePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _parkin.new_ValuePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _parkin.ValuePair_first_set
    __swig_getmethods__["first"] = _parkin.ValuePair_first_get
    if _newclass:first = _swig_property(_parkin.ValuePair_first_get, _parkin.ValuePair_first_set)
    __swig_setmethods__["second"] = _parkin.ValuePair_second_set
    __swig_getmethods__["second"] = _parkin.ValuePair_second_get
    if _newclass:second = _swig_property(_parkin.ValuePair_second_get, _parkin.ValuePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _parkin.delete_ValuePair
    __del__ = lambda self : None;
ValuePair_swigregister = _parkin.ValuePair_swigregister
ValuePair_swigregister(ValuePair)

class MeasurementPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasurementPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeasurementPoint, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.MeasurementPoint_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.MeasurementPoint___nonzero__(self)
    def __bool__(self): return _parkin.MeasurementPoint___bool__(self)
    def __len__(self): return _parkin.MeasurementPoint___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _parkin.MeasurementPoint___getitem__(self, *args)
    def __delitem__(self, *args): return _parkin.MeasurementPoint___delitem__(self, *args)
    def has_key(self, *args): return _parkin.MeasurementPoint_has_key(self, *args)
    def keys(self): return _parkin.MeasurementPoint_keys(self)
    def values(self): return _parkin.MeasurementPoint_values(self)
    def items(self): return _parkin.MeasurementPoint_items(self)
    def __contains__(self, *args): return _parkin.MeasurementPoint___contains__(self, *args)
    def key_iterator(self): return _parkin.MeasurementPoint_key_iterator(self)
    def value_iterator(self): return _parkin.MeasurementPoint_value_iterator(self)
    def __setitem__(self, *args): return _parkin.MeasurementPoint___setitem__(self, *args)
    def asdict(self): return _parkin.MeasurementPoint_asdict(self)
    def __init__(self, *args): 
        this = _parkin.new_MeasurementPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _parkin.MeasurementPoint_empty(self)
    def size(self): return _parkin.MeasurementPoint_size(self)
    def clear(self): return _parkin.MeasurementPoint_clear(self)
    def swap(self, *args): return _parkin.MeasurementPoint_swap(self, *args)
    def get_allocator(self): return _parkin.MeasurementPoint_get_allocator(self)
    def begin(self): return _parkin.MeasurementPoint_begin(self)
    def end(self): return _parkin.MeasurementPoint_end(self)
    def rbegin(self): return _parkin.MeasurementPoint_rbegin(self)
    def rend(self): return _parkin.MeasurementPoint_rend(self)
    def count(self, *args): return _parkin.MeasurementPoint_count(self, *args)
    def erase(self, *args): return _parkin.MeasurementPoint_erase(self, *args)
    def find(self, *args): return _parkin.MeasurementPoint_find(self, *args)
    def lower_bound(self, *args): return _parkin.MeasurementPoint_lower_bound(self, *args)
    def upper_bound(self, *args): return _parkin.MeasurementPoint_upper_bound(self, *args)
    __swig_destroy__ = _parkin.delete_MeasurementPoint
    __del__ = lambda self : None;
MeasurementPoint_swigregister = _parkin.MeasurementPoint_swigregister
MeasurementPoint_swigregister(MeasurementPoint)

class Trajectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trajectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trajectory, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.Trajectory_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.Trajectory___nonzero__(self)
    def __bool__(self): return _parkin.Trajectory___bool__(self)
    def __len__(self): return _parkin.Trajectory___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _parkin.Trajectory___getitem__(self, *args)
    def __delitem__(self, *args): return _parkin.Trajectory___delitem__(self, *args)
    def has_key(self, *args): return _parkin.Trajectory_has_key(self, *args)
    def keys(self): return _parkin.Trajectory_keys(self)
    def values(self): return _parkin.Trajectory_values(self)
    def items(self): return _parkin.Trajectory_items(self)
    def __contains__(self, *args): return _parkin.Trajectory___contains__(self, *args)
    def key_iterator(self): return _parkin.Trajectory_key_iterator(self)
    def value_iterator(self): return _parkin.Trajectory_value_iterator(self)
    def __setitem__(self, *args): return _parkin.Trajectory___setitem__(self, *args)
    def asdict(self): return _parkin.Trajectory_asdict(self)
    def __init__(self, *args): 
        this = _parkin.new_Trajectory(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _parkin.Trajectory_empty(self)
    def size(self): return _parkin.Trajectory_size(self)
    def clear(self): return _parkin.Trajectory_clear(self)
    def swap(self, *args): return _parkin.Trajectory_swap(self, *args)
    def get_allocator(self): return _parkin.Trajectory_get_allocator(self)
    def begin(self): return _parkin.Trajectory_begin(self)
    def end(self): return _parkin.Trajectory_end(self)
    def rbegin(self): return _parkin.Trajectory_rbegin(self)
    def rend(self): return _parkin.Trajectory_rend(self)
    def count(self, *args): return _parkin.Trajectory_count(self, *args)
    def erase(self, *args): return _parkin.Trajectory_erase(self, *args)
    def find(self, *args): return _parkin.Trajectory_find(self, *args)
    def lower_bound(self, *args): return _parkin.Trajectory_lower_bound(self, *args)
    def upper_bound(self, *args): return _parkin.Trajectory_upper_bound(self, *args)
    __swig_destroy__ = _parkin.delete_Trajectory
    __del__ = lambda self : None;
Trajectory_swigregister = _parkin.Trajectory_swigregister
Trajectory_swigregister(Trajectory)

class TrajectoryMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrajectoryMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrajectoryMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.TrajectoryMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.TrajectoryMap___nonzero__(self)
    def __bool__(self): return _parkin.TrajectoryMap___bool__(self)
    def __len__(self): return _parkin.TrajectoryMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _parkin.TrajectoryMap___getitem__(self, *args)
    def __delitem__(self, *args): return _parkin.TrajectoryMap___delitem__(self, *args)
    def has_key(self, *args): return _parkin.TrajectoryMap_has_key(self, *args)
    def keys(self): return _parkin.TrajectoryMap_keys(self)
    def values(self): return _parkin.TrajectoryMap_values(self)
    def items(self): return _parkin.TrajectoryMap_items(self)
    def __contains__(self, *args): return _parkin.TrajectoryMap___contains__(self, *args)
    def key_iterator(self): return _parkin.TrajectoryMap_key_iterator(self)
    def value_iterator(self): return _parkin.TrajectoryMap_value_iterator(self)
    def __setitem__(self, *args): return _parkin.TrajectoryMap___setitem__(self, *args)
    def asdict(self): return _parkin.TrajectoryMap_asdict(self)
    def __init__(self, *args): 
        this = _parkin.new_TrajectoryMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _parkin.TrajectoryMap_empty(self)
    def size(self): return _parkin.TrajectoryMap_size(self)
    def clear(self): return _parkin.TrajectoryMap_clear(self)
    def swap(self, *args): return _parkin.TrajectoryMap_swap(self, *args)
    def get_allocator(self): return _parkin.TrajectoryMap_get_allocator(self)
    def begin(self): return _parkin.TrajectoryMap_begin(self)
    def end(self): return _parkin.TrajectoryMap_end(self)
    def rbegin(self): return _parkin.TrajectoryMap_rbegin(self)
    def rend(self): return _parkin.TrajectoryMap_rend(self)
    def count(self, *args): return _parkin.TrajectoryMap_count(self, *args)
    def erase(self, *args): return _parkin.TrajectoryMap_erase(self, *args)
    def find(self, *args): return _parkin.TrajectoryMap_find(self, *args)
    def lower_bound(self, *args): return _parkin.TrajectoryMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _parkin.TrajectoryMap_upper_bound(self, *args)
    __swig_destroy__ = _parkin.delete_TrajectoryMap
    __del__ = lambda self : None;
TrajectoryMap_swigregister = _parkin.TrajectoryMap_swigregister
TrajectoryMap_swigregister(TrajectoryMap)

PLUS = _parkin.PLUS
MINUS = _parkin.MINUS
TIMES = _parkin.TIMES
DIVIDE = _parkin.DIVIDE
POWER = _parkin.POWER
ABS = _parkin.ABS
ARCCOS = _parkin.ARCCOS
ARCOSH = _parkin.ARCOSH
ARCSIN = _parkin.ARCSIN
ARSINH = _parkin.ARSINH
ARCTAN = _parkin.ARCTAN
ARTANH = _parkin.ARTANH
CEIL = _parkin.CEIL
COS = _parkin.COS
COSH = _parkin.COSH
DELTA = _parkin.DELTA
EXP = _parkin.EXP
FLOOR = _parkin.FLOOR
LN = _parkin.LN
LOG = _parkin.LOG
SIGN = _parkin.SIGN
SIN = _parkin.SIN
SINH = _parkin.SINH
TAN = _parkin.TAN
TANH = _parkin.TANH
HILLplus = _parkin.HILLplus
HILLminus = _parkin.HILLminus
class Expression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expression, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_Expression
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _parkin.new_Expression(*args)
        try: self.this.append(this)
        except: self.this = this
    def eval(self, *args): return _parkin.Expression_eval(self, *args)
    def df(self, *args): return _parkin.Expression_df(self, *args)
    def prt(self, *args): return _parkin.Expression_prt(self, *args)
    def eq(self, *args): return _parkin.Expression_eq(self, *args)
    def off(self, *args): return _parkin.Expression_off(self, *args)
    def __str__(self): return _parkin.Expression___str__(self)
Expression_swigregister = _parkin.Expression_swigregister
Expression_swigregister(Expression)

class BioRHS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BioRHS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BioRHS, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_BioRHS
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _parkin.new_BioRHS(*args)
        try: self.this.append(this)
        except: self.this = this
    def setRHS(self, *args): return _parkin.BioRHS_setRHS(self, *args)
    def getRHS(self): return _parkin.BioRHS_getRHS(self)
    def getdRHS(self): return _parkin.BioRHS_getdRHS(self)
    def resetSpecies(self, *args): return _parkin.BioRHS_resetSpecies(self, *args)
    def getSpecies(self): return _parkin.BioRHS_getSpecies(self)
    def setParameters(self, *args): return _parkin.BioRHS_setParameters(self, *args)
    def getParameters(self): return _parkin.BioRHS_getParameters(self)
    def setParBase(self, *args): return _parkin.BioRHS_setParBase(self, *args)
    def f(self, *args): return _parkin.BioRHS_f(self, *args)
    def Jf(self, *args): return _parkin.BioRHS_Jf(self, *args)
    def df(self, *args): return _parkin.BioRHS_df(self, *args)
BioRHS_swigregister = _parkin.BioRHS_swigregister
BioRHS_swigregister(BioRHS)

class BioSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BioSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BioSystem, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_BioSystem
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _parkin.new_BioSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    def getSolverRTol(self): return _parkin.BioSystem_getSolverRTol(self)
    def setSolverRTol(self, *args): return _parkin.BioSystem_setSolverRTol(self, *args)
    def setSolverATol(self, *args): return _parkin.BioSystem_setSolverATol(self, *args)
    def getSysPar(self): return _parkin.BioSystem_getSysPar(self)
    def getOptPar(self): return _parkin.BioSystem_getOptPar(self)
    def getLinftyModel(self): return _parkin.BioSystem_getLinftyModel(self)
    def getSpecies(self): return _parkin.BioSystem_getSpecies(self)
    def resetSpecies(self, *args): return _parkin.BioSystem_resetSpecies(self, *args)
    def getParameters(self): return _parkin.BioSystem_getParameters(self)
    def setParameters(self, *args): return _parkin.BioSystem_setParameters(self, *args)
    def getBreakpoints(self): return _parkin.BioSystem_getBreakpoints(self)
    def setBreakpoints(self, *args): return _parkin.BioSystem_setBreakpoints(self, *args)
    def getEvent(self, *args): return _parkin.BioSystem_getEvent(self, *args)
    def setEvent(self, *args): return _parkin.BioSystem_setEvent(self, *args)
    def getODE(self): return _parkin.BioSystem_getODE(self)
    def getVarExpr(self): return _parkin.BioSystem_getVarExpr(self)
    def getODEExpr(self): return _parkin.BioSystem_getODEExpr(self)
    def setODESystem(self, *args): return _parkin.BioSystem_setODESystem(self, *args)
    def getMeasurementList(self): return _parkin.BioSystem_getMeasurementList(self)
    def setMeasurementList(self, *args): return _parkin.BioSystem_setMeasurementList(self, *args)
    def setEmptyMeasurementList(self): return _parkin.BioSystem_setEmptyMeasurementList(self)
    def getMeasurements(self): return _parkin.BioSystem_getMeasurements(self)
    def getMeasurementWeights(self): return _parkin.BioSystem_getMeasurementWeights(self)
    def setMeasurementTimePoints(self, *args): return _parkin.BioSystem_setMeasurementTimePoints(self, *args)
    def getMeasurementTimePoints(self): return _parkin.BioSystem_getMeasurementTimePoints(self)
    def getOdeTrajectoryTimePoints(self): return _parkin.BioSystem_getOdeTrajectoryTimePoints(self)
    def getParamValue(self, *args): return _parkin.BioSystem_getParamValue(self, *args)
    def setParamValue(self, *args): return _parkin.BioSystem_setParamValue(self, *args)
    def setParamValues(self, *args): return _parkin.BioSystem_setParamValues(self, *args)
    def getInitialValue(self, *args): return _parkin.BioSystem_getInitialValue(self, *args)
    def setInitialValue(self, *args): return _parkin.BioSystem_setInitialValue(self, *args)
    def setInitialValues(self, *args): return _parkin.BioSystem_setInitialValues(self, *args)
    def getEvaluationTrajectories(self): return _parkin.BioSystem_getEvaluationTrajectories(self)
    def getOdeTrajectory(self, *args): return _parkin.BioSystem_getOdeTrajectory(self, *args)
    def getSimTrajectoryPoints(self, *args): return _parkin.BioSystem_getSimTrajectoryPoints(self, *args)
    def iniODE(self, *args): return _parkin.BioSystem_iniODE(self, *args)
    def computeModel(self, *args): return _parkin.BioSystem_computeModel(self, *args)
    def computeJacobian(self, *args): return _parkin.BioSystem_computeJacobian(self, *args)
    def getComputeErrorFlag(self): return _parkin.BioSystem_getComputeErrorFlag(self)
BioSystem_swigregister = _parkin.BioSystem_swigregister
BioSystem_swigregister(BioSystem)

class BioSystemWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BioSystemWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BioSystemWrapper, name)
    __repr__ = _swig_repr
    __swig_getmethods__["fcnVar"] = lambda x: _parkin.BioSystemWrapper_fcnVar
    if _newclass:fcnVar = staticmethod(_parkin.BioSystemWrapper_fcnVar)
    __swig_getmethods__["jacVar"] = lambda x: _parkin.BioSystemWrapper_jacVar
    if _newclass:jacVar = staticmethod(_parkin.BioSystemWrapper_jacVar)
    __swig_getmethods__["fcnODE"] = lambda x: _parkin.BioSystemWrapper_fcnODE
    if _newclass:fcnODE = staticmethod(_parkin.BioSystemWrapper_fcnODE)
    __swig_getmethods__["jacODE"] = lambda x: _parkin.BioSystemWrapper_jacODE
    if _newclass:jacODE = staticmethod(_parkin.BioSystemWrapper_jacODE)
    __swig_getmethods__["setObj"] = lambda x: _parkin.BioSystemWrapper_setObj
    if _newclass:setObj = staticmethod(_parkin.BioSystemWrapper_setObj)
    def __init__(self): 
        this = _parkin.new_BioSystemWrapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_BioSystemWrapper
    __del__ = lambda self : None;
BioSystemWrapper_swigregister = _parkin.BioSystemWrapper_swigregister
BioSystemWrapper_swigregister(BioSystemWrapper)

def BioSystemWrapper_fcnVar(*args):
  return _parkin.BioSystemWrapper_fcnVar(*args)
BioSystemWrapper_fcnVar = _parkin.BioSystemWrapper_fcnVar

def BioSystemWrapper_jacVar(*args):
  return _parkin.BioSystemWrapper_jacVar(*args)
BioSystemWrapper_jacVar = _parkin.BioSystemWrapper_jacVar

def BioSystemWrapper_fcnODE(*args):
  return _parkin.BioSystemWrapper_fcnODE(*args)
BioSystemWrapper_fcnODE = _parkin.BioSystemWrapper_fcnODE

def BioSystemWrapper_jacODE(*args):
  return _parkin.BioSystemWrapper_jacODE(*args)
BioSystemWrapper_jacODE = _parkin.BioSystemWrapper_jacODE

def BioSystemWrapper_setObj(*args):
  return _parkin.BioSystemWrapper_setObj(*args)
BioSystemWrapper_setObj = _parkin.BioSystemWrapper_setObj

class BioPAR(UserFunc):
    __swig_setmethods__ = {}
    for _s in [UserFunc]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BioPAR, name, value)
    __swig_getmethods__ = {}
    for _s in [UserFunc]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BioPAR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _parkin.new_BioPAR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _parkin.delete_BioPAR
    __del__ = lambda self : None;
    def fcn(self, *args): return _parkin.BioPAR_fcn(self, *args)
    def jac(self, *args): return _parkin.BioPAR_jac(self, *args)
    def setCurrentParameter(self, *args): return _parkin.BioPAR_setCurrentParameter(self, *args)
    def getCurrentParameter(self): return _parkin.BioPAR_getCurrentParameter(self)
    def getParameters(self): return _parkin.BioPAR_getParameters(self)
    def getSpecies(self): return _parkin.BioPAR_getSpecies(self)
    def getMeasurements(self): return _parkin.BioPAR_getMeasurements(self)
    def getMeasurementWeights(self): return _parkin.BioPAR_getMeasurementWeights(self)
BioPAR_swigregister = _parkin.BioPAR_swigregister
BioPAR_swigregister(BioPAR)

class BioProcessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BioProcessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BioProcessor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _parkin.delete_BioProcessor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _parkin.new_BioProcessor(*args)
        try: self.this.append(this)
        except: self.this = this
    def setProcessingMethod(self, *args): return _parkin.BioProcessor_setProcessingMethod(self, *args)
    def setIOpt(self, *args): return _parkin.BioProcessor_setIOpt(self, *args)
    def getIOpt(self): return _parkin.BioProcessor_getIOpt(self)
    def setParameterConstraints(self, *args): return _parkin.BioProcessor_setParameterConstraints(self, *args)
    def setCurrentParamValues(self, *args): return _parkin.BioProcessor_setCurrentParamValues(self, *args)
    def getCurrentParamValues(self): return _parkin.BioProcessor_getCurrentParamValues(self)
    def setCurrentParamThres(self, *args): return _parkin.BioProcessor_setCurrentParamThres(self, *args)
    def getCurrentParamThres(self): return _parkin.BioProcessor_getCurrentParamThres(self)
    def setCurrentSpeciesThres(self, *args): return _parkin.BioProcessor_setCurrentSpeciesThres(self, *args)
    def getCurrentSpeciesThres(self): return _parkin.BioProcessor_getCurrentSpeciesThres(self)
    def computeModel(self): return _parkin.BioProcessor_computeModel(self)
    def computeSensitivityTrajectories(self): return _parkin.BioProcessor_computeSensitivityTrajectories(self)
    def getAdaptiveTimepoints(self): return _parkin.BioProcessor_getAdaptiveTimepoints(self)
    def getScaledSensitivityTrajectories(self): return _parkin.BioProcessor_getScaledSensitivityTrajectories(self)
    def prepareDetailedSensitivities(self, *args): return _parkin.BioProcessor_prepareDetailedSensitivities(self, *args)
    def getSensitivityMatrices(self): return _parkin.BioProcessor_getSensitivityMatrices(self)
    def getSensitivityDecomps(self): return _parkin.BioProcessor_getSensitivityDecomps(self)
    def identifyParameters(self, xtol = 1.0e-4): return _parkin.BioProcessor_identifyParameters(self, xtol)
    def getIdentificationResults(self): return _parkin.BioProcessor_getIdentificationResults(self)
BioProcessor_swigregister = _parkin.BioProcessor_swigregister
BioProcessor_swigregister(BioProcessor)

class MeasurementList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasurementList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeasurementList, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.MeasurementList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.MeasurementList___nonzero__(self)
    def __bool__(self): return _parkin.MeasurementList___bool__(self)
    def __len__(self): return _parkin.MeasurementList___len__(self)
    def pop(self): return _parkin.MeasurementList_pop(self)
    def __getslice__(self, *args): return _parkin.MeasurementList___getslice__(self, *args)
    def __setslice__(self, *args): return _parkin.MeasurementList___setslice__(self, *args)
    def __delslice__(self, *args): return _parkin.MeasurementList___delslice__(self, *args)
    def __delitem__(self, *args): return _parkin.MeasurementList___delitem__(self, *args)
    def __getitem__(self, *args): return _parkin.MeasurementList___getitem__(self, *args)
    def __setitem__(self, *args): return _parkin.MeasurementList___setitem__(self, *args)
    def append(self, *args): return _parkin.MeasurementList_append(self, *args)
    def empty(self): return _parkin.MeasurementList_empty(self)
    def size(self): return _parkin.MeasurementList_size(self)
    def clear(self): return _parkin.MeasurementList_clear(self)
    def swap(self, *args): return _parkin.MeasurementList_swap(self, *args)
    def get_allocator(self): return _parkin.MeasurementList_get_allocator(self)
    def begin(self): return _parkin.MeasurementList_begin(self)
    def end(self): return _parkin.MeasurementList_end(self)
    def rbegin(self): return _parkin.MeasurementList_rbegin(self)
    def rend(self): return _parkin.MeasurementList_rend(self)
    def pop_back(self): return _parkin.MeasurementList_pop_back(self)
    def erase(self, *args): return _parkin.MeasurementList_erase(self, *args)
    def __init__(self, *args): 
        this = _parkin.new_MeasurementList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _parkin.MeasurementList_push_back(self, *args)
    def front(self): return _parkin.MeasurementList_front(self)
    def back(self): return _parkin.MeasurementList_back(self)
    def assign(self, *args): return _parkin.MeasurementList_assign(self, *args)
    def resize(self, *args): return _parkin.MeasurementList_resize(self, *args)
    def insert(self, *args): return _parkin.MeasurementList_insert(self, *args)
    def reserve(self, *args): return _parkin.MeasurementList_reserve(self, *args)
    def capacity(self): return _parkin.MeasurementList_capacity(self)
    __swig_destroy__ = _parkin.delete_MeasurementList
    __del__ = lambda self : None;
MeasurementList_swigregister = _parkin.MeasurementList_swigregister
MeasurementList_swigregister(MeasurementList)

class ExpressionMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _parkin.ExpressionMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _parkin.ExpressionMap___nonzero__(self)
    def __bool__(self): return _parkin.ExpressionMap___bool__(self)
    def __len__(self): return _parkin.ExpressionMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _parkin.ExpressionMap___getitem__(self, *args)
    def __delitem__(self, *args): return _parkin.ExpressionMap___delitem__(self, *args)
    def has_key(self, *args): return _parkin.ExpressionMap_has_key(self, *args)
    def keys(self): return _parkin.ExpressionMap_keys(self)
    def values(self): return _parkin.ExpressionMap_values(self)
    def items(self): return _parkin.ExpressionMap_items(self)
    def __contains__(self, *args): return _parkin.ExpressionMap___contains__(self, *args)
    def key_iterator(self): return _parkin.ExpressionMap_key_iterator(self)
    def value_iterator(self): return _parkin.ExpressionMap_value_iterator(self)
    def __setitem__(self, *args): return _parkin.ExpressionMap___setitem__(self, *args)
    def asdict(self): return _parkin.ExpressionMap_asdict(self)
    def __init__(self, *args): 
        this = _parkin.new_ExpressionMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _parkin.ExpressionMap_empty(self)
    def size(self): return _parkin.ExpressionMap_size(self)
    def clear(self): return _parkin.ExpressionMap_clear(self)
    def swap(self, *args): return _parkin.ExpressionMap_swap(self, *args)
    def get_allocator(self): return _parkin.ExpressionMap_get_allocator(self)
    def begin(self): return _parkin.ExpressionMap_begin(self)
    def end(self): return _parkin.ExpressionMap_end(self)
    def rbegin(self): return _parkin.ExpressionMap_rbegin(self)
    def rend(self): return _parkin.ExpressionMap_rend(self)
    def count(self, *args): return _parkin.ExpressionMap_count(self, *args)
    def erase(self, *args): return _parkin.ExpressionMap_erase(self, *args)
    def find(self, *args): return _parkin.ExpressionMap_find(self, *args)
    def lower_bound(self, *args): return _parkin.ExpressionMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _parkin.ExpressionMap_upper_bound(self, *args)
    __swig_destroy__ = _parkin.delete_ExpressionMap
    __del__ = lambda self : None;
ExpressionMap_swigregister = _parkin.ExpressionMap_swigregister
ExpressionMap_swigregister(ExpressionMap)

# This file is compatible with both classic and new-style classes.


